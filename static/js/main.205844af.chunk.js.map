{"version":3,"sources":["App.tsx","index.tsx"],"names":["goodsFromServer","SortType","LIGTH_COLOR_STYLE","App","_useState","useState","_useState2","_slicedToArray","sortField","setSortField","_useState3","_useState4","isReversed","setIsReversed","goodsForSort","goods","_ref","sortBy","_ref$order","order","preparedGoods","_toConsumableArray","sort","good1","good2","Name","localeCompare","Length","length","Reset","Reverse","reverse","getPreparedGoods","resetGoods","_jsxs","className","children","_jsx","type","concat","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"uOAKaA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGGC,EAAQ,SAARA,GAAQ,OAARA,EAAQ,2BAARA,EAAQ,wBAARA,EAAQ,kBAARA,EAAQ,cAARA,CAAQ,EAARA,GAAQ,IAOPC,EAAoB,WA6BnB,IAAMC,EAAM,WACjB,IAAAC,EAAkCC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAAvCI,EAASF,EAAA,GAAEG,EAAYH,EAAA,GAC9BI,EAAoCL,mBAAS,IAAGM,EAAAJ,YAAAG,EAAA,GAAzCE,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAE1BG,EA/BR,SAA0BC,EAAeC,GACwB,IAA7DC,EAAMD,EAANC,OAAMC,EAAAF,EAAEG,aAAK,IAAAD,EAAG,GAAEA,EACdE,EAAaC,YAAON,GAkB1B,OAhBIE,GACFG,EAAcE,MAAK,SAACC,EAAOC,GACzB,OAAQP,GACN,KAAKhB,EAASwB,KACZ,OAAOF,EAAMG,cAAcF,GAE7B,KAAKvB,EAAS0B,OACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,KAAK3B,EAAS4B,MACd,QACE,OAAO,EAEb,IAGEV,IAAUlB,EAAS6B,QACdV,EAAcW,UAGhBX,CACT,CAMuBY,CAAiBhC,EACpC,CACEiB,OAAQT,EACRW,MAAOP,IAWLqB,EAAa,WACjBxB,EAAa,IACbI,EAAc,GAChB,EAYA,OACEqB,eAAA,OAAKC,UAAU,kBAAiBC,SAAA,CAC9BF,eAAA,OAAKC,UAAU,UAASC,SAAA,CACtBC,cAAA,UACEC,KAAK,SACLH,UAAS,kBAAAI,OAAoB/B,IAAcP,EAASwB,KAAO,GAAKvB,GAChEsC,QAAS,kBAAM/B,EAAaR,EAASwB,KAAK,EAACW,SAC5C,wBAIDC,cAAA,UACEC,KAAK,SACLH,UAAS,qBAAAI,OAAuB/B,IAAcP,EAAS0B,OAAS,GAAKzB,GACrEsC,QAAS,kBAAM/B,EAAaR,EAAS0B,OAAO,EAACS,SAC9C,mBAIDC,cAAA,UACEC,KAAK,SACLH,UAAS,qBAAAI,OAAuB3B,IAAeX,EAAS6B,QAAU,GAAK5B,GACvEsC,QA7Ca,WACf5B,IAAeX,EAAS6B,QAC1BjB,EAAc,IAEdA,EAAcZ,EAAS6B,QAE3B,EAuC8BM,SACvB,aAIC5B,GAAaI,IApCnByB,cAAA,UACEC,KAAK,SACLE,QAASP,EACTE,UAAU,4BAA2BC,SACtC,aAmCCC,cAAA,MAAAD,SACGtB,EAAa2B,KAAI,SAAAC,GAAI,OAAIL,cAAA,MAAe,UAAQ,OAAMD,SAAEM,GAAtBA,EAAgC,QAI3E,ECvHAC,IAASC,OACPP,cAAClC,EAAG,IACJ0C,SAASC,eAAe,Q","file":"static/js/main.205844af.chunk.js","sourcesContent":["import { useState } from 'react';\n\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  Name = 'Sort alphabetically',\n  Length = 'Sort by length',\n  Reverse = 'Reverse',\n  Reset = 'Reset',\n}\n\nconst LIGTH_COLOR_STYLE = 'is-light';\n\nfunction getPreparedGoods(goods: string[],\n  { sortBy, order = '' }: { sortBy: SortType, order?: string }) {\n  const preparedGoods = [...goods];\n\n  if (sortBy) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortBy) {\n        case SortType.Name:\n          return good1.localeCompare(good2);\n\n        case SortType.Length:\n          return good1.length - good2.length;\n\n        case SortType.Reset:\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (order === SortType.Reverse) {\n    return preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App = () => {\n  const [sortField, setSortField] = useState('');\n  const [isReversed, setIsReversed] = useState('');\n\n  const goodsForSort = getPreparedGoods(goodsFromServer,\n    {\n      sortBy: sortField as SortType,\n      order: isReversed,\n    });\n\n  const reverseGoods = () => {\n    if (isReversed === SortType.Reverse) {\n      setIsReversed('');\n    } else {\n      setIsReversed(SortType.Reverse);\n    }\n  };\n\n  const resetGoods = () => {\n    setSortField('');\n    setIsReversed('');\n  };\n\n  const reset = () => (\n    <button\n      type=\"button\"\n      onClick={resetGoods}\n      className=\"button is-danger is-light\"\n    >\n      Reset\n    </button>\n  );\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={`button is-info ${sortField === SortType.Name ? '' : LIGTH_COLOR_STYLE}`}\n          onClick={() => setSortField(SortType.Name)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={`button is-success ${sortField === SortType.Length ? '' : LIGTH_COLOR_STYLE}`}\n          onClick={() => setSortField(SortType.Length)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={`button is-warning ${isReversed === SortType.Reverse ? '' : LIGTH_COLOR_STYLE}`}\n          onClick={reverseGoods}\n        >\n          Reverse\n        </button>\n\n        {(sortField || isReversed) && reset()}\n      </div>\n\n      <ul>\n        {goodsForSort.map(good => <li key={good} data-cy=\"Good\">{good}</li>)}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}